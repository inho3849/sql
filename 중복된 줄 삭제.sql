*. 파일에서 중복된 줄 삭제

모든 줄이 정렬된 파일이 있는 경우(알파벳순 또는 그 외) (연속된) 중복 줄을 쉽게 삭제할 수 있습니다. 
좋아하는 텍스트 편집기 에서 파일을 열고 ^ ( . * ) ( \r ? \n \1 ) + $ 를 검색하여 \1 로 바꾸는 검색 및 바꾸기를 수행하면 됩니다 . 
이 작업을 수행하려면 앵커가 줄 바꿈 앞뒤에 일치해야 하며(파일이나 문자열의 시작과 끝에만 일치해서는 안 됨) 마침표 가 줄 바꿈 과 일치해서는 안 됩니다 .

작동 방식은 다음과 같습니다. 캐럿은 줄의 시작 부분에서만 일치합니다. 따라서 정규식 엔진은 해당 줄의 나머지 부분만 일치시키려고 시도합니다. 
점 과 별 조합은 내용이 무엇이든 전체 줄과 일치합니다. 괄호는 일치된 줄을 첫 번째 백레퍼런스에 저장합니다.

다음으로 줄 구분 기호를 매치합니다. 물음표 를 \r ? \n 에 넣어 이 정규 표현식이 Windows(\r\n)와 UNIX(\n) 텍스트 파일 모두에서 작동하도록 했습니다. 
그래서 지금까지 줄과 그 다음 줄 바꿈을 매치했습니다.

이제 이 조합 뒤에 같은 줄의 중복이 있는지 확인해야 합니다. 간단히 \1 로 합니다 . 이것은 우리가 매치한 줄을 보관하는 첫 번째 백레퍼런스입니다. 
백레퍼런스는 바로 그 텍스트와 매치합니다.

백레퍼런스가 일치하지 않으면 정규식 일치와 백레퍼런스가 삭제되고 정규식 엔진은 다음 줄의 시작 부분에서 다시 시도합니다. 
백레퍼런스가 성공하면 정규식의 더하기 기호는 줄의 추가 사본과 일치하려고 시도합니다. 마지막으로 달러 기호는 정규식 엔진이 백레퍼런스와 일치하는 텍스트가 완전한 줄인지 확인하도록 합니다. 
백레퍼런스와 일치하는 텍스트 앞에 줄 바꿈( \r ? \n 과 일치)이 있다는 것을 이미 알고 있습니다. 따라서 이제 줄 바꿈이 뒤에 오는지 또는 달러 기호를 사용하여 파일 끝에 있는지 확인합니다 .

전체 일치 항목은 line\nline (또는 line\nline\nline 등)이 됩니다. 검색 및 바꾸기를 하기 때문에 줄, 중복 항목, 그 사이의 줄 바꿈은 모두 파일에서 삭제됩니다. 
원래 줄은 유지하지만 중복 항목은 유지하지 않으려고 하므로 \1을 대체 텍스트로 사용하여 원래 줄을 다시 넣습니다.

*. 문자열에서 중복 항목 제거
위의 예를 afterseparator(item)(separator\1)+beforeseparator 로 일반화할 수 있습니다 . 여기서 afterseparator 와 beforeseparator는 길이가 0입니다. 
따라서 쉼표로 구분된 목록에서 연속된 중복을 제거하려면 (?<= , | ^ ) ( [ ^ , ] * ) ( , \1 ) + (?= , | $ ) 를 사용할 수 있습니다 .

긍정적 룩어헤드 (?<= , | ^ ) 는 정규식 엔진이 문자열 시작 부분 또는 쉼표 뒤에서 일치를 시작하도록 합니다. ( [ ^ , ] * ) 는 항목을 캡처합니다. 
( , \1 ) + 는 연속된 중복 항목과 일치합니다. 
마지막으로 긍정적 룩어헤드 (?= , | $ ) 는 쉼표 또는 문자열 끝을 확인하여 중복 항목이 완전한 항목인지 확인합니다.



https://heropy.blog/2018/10/28/regexp/


^	줄(Line)의 시작에서 일치, /^abc/
$	줄(Line)의 끝에서 일치, /xyz$/
.	임의의 한 문자와 일치
a|b	a 또는 b와 일치, 인덱스가 작은 것을 우선 반환
*	0회 이상 연속으로 반복되는 문자와 가능한 많이 일치, {0,}와 동일
*?	0회 이상 연속으로 반복되는 문자와 가능한 적게 일치(lazy), {0}와 동일
+	1회 이상 연속으로 반복되는 문자에 가능한 많이 일치, {1,}와 동일
+?	1회 이상 연속으로 반복되는 문자에 가능한 적게 일치(lazy), {1}와 동일
?	없거나 1회 가능한 많이 일치
??	없거나 1회 가능한 적게 일치(lazy)
{3}	3(숫자)개 연속 일치
{3,}	3개 이상 연속 일치
{3,5}	3개 이상 5개 이하(3~5개) 연속 일치
{3,5}?	3개 이상 5개 이하(3~5개) 연속 중 가능한 적은 3개 연속 일치(lazy), {3}와 동일
()	캡처(Capture)할 그룹
(?<>)	캡처 그룹 이름 지정, /(?<name>pattern)/ ES2018
\1~9	정규식 내 캡처된 값 참조, /(abc)\1/
(?:)	캡처(Capture)하지 않는 그룹
(?=)	앞쪽 일치(Lookahead), /ab(?=c)/
(?!)	부정 앞쪽 일치(Negative Lookahead), /ab(?!c)/
(?<=)	뒤쪽 일치(Lookbehind), /(?<=ab)c/ ES2018
(?<!)	부정 뒤쪽 일치(Negative Lookbehind), /(?<!ab)c/ ES2018
[abc]	a 또는 b 또는 c와 일치, 점(.)이나 별표(*) 같은 특수 문자는 []안에서 특수 문자가 아님, /\.[.]/
[a-z]	a부터 z 사이의 문자 구간에 일치(영어 소문자)
[A-Z]	A부터 Z 사이의 문자 구간에 일치(영어 대문자)
[0-9]	0부터 9 사이의 문자 구간에 일치(숫자)
[가-힣]	가부터 힣 사이의 문자 구간에 일치(한글)
[2-7]	2부터 7 사이의 문자 구간에 일치(2,3,4,5,6,7)
[b-f]	b부터 f 사이의 문자 구간에 일치(b,c,d,e,f)
[다-바]	다부터 바 사이의 문자 구간에 일치(다,라,마,바)
[^abc]	a 또는 b 또는 c가 아닌 나머지 문자에 일치(부정)
\	이스케이프 문자, /\.\?\/\$\^/
\b	63개 문자(영문 대소문자 52개 + 숫자 10개 + _(underscore))가 아닌 나머지 문자에 일치하는 경계(boundary)
\B	63개 문자에 일치하는 경계
\d	숫자(Digit)에 일치
\D	숫자가 아닌 문자에 일치
\p{}	유니코드 속성(Property) 집합에 맞는 문자에 일치, /\p{Emoji}/u ES2018
\P{}	유니코드 속성 집합에 맞지 않는 문자에 일치, /\p{Uppercase}/u ES2018
\s	공백(Space, Tab 등)에 일치
\S	공백이 아닌 문자에 일치
\w	63개 문자(Word, 영문 대소문자 52개 + 숫자 10개 + _)에 일치
\W	63개 문자가 아닌 나머지 문자에 일치
\x	16진수 문자에 일치, /\x61/는 a에 일치
\0	8진수 문자에 일치, /\141/은 a에 일치
\u	유니코드(Unicode) 문자에 일치, /\u0061/는 a에 일치
\c	제어(Control) 문자에 일치
\f	폼 피드(FF, U+000C) 문자에 일치
\n	줄 바꿈(LF, U+000A) 문자에 일치
\r	캐리지 리턴(CR, U+000D) 문자에 일치
\t	탭 (U+0009) 문자에 일치
$`	문자 대체(replace) 시 일치한 문자 이전 값 참조
$'	문자 대체(replace) 시 일치한 문자 이후 값 참조
$+	문자 대체(replace) 시 마지막으로 캡처된 값 참조
$&	문자 대체(replace) 시 일치한 문자 결과 전체 참조
$_	문자 대체(replace) 시 입력(input)된 문자 전체 참조
$1~9	문자 대체(replace) 시 캡처(Capture)된 값 참조